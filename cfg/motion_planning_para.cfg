#!/usr/bin/env python
PACKAGE = "asctec_mav_motion_planning"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# @todo Think about levels. Setting most of these to STOP to guarantee atomicity.
# @todo Double check these ranges, defaults

ENABLE_CTRL         = gen.const("ENABLE_CTRL",      int_t, 0x00000001, "enable_ctrl")
PACKET_RATE         = gen.const("PACKET_RATE",      int_t, 0x00000002, "configures the packet rates")
HLI_CONFIG          = gen.const("HLI_CONFIG",       int_t, 0x00000004, "configures where control and state estimation are performed")
MISC                = gen.const("MISC",             int_t, 0x01000000, "misc")


enum_position_ctrl_mode = gen.enum([
gen.const("POSCTRL_OFF",             str_t, "off",         "position control off"),
gen.const("POSCTRL_HIGHLEVEL",       str_t, "HighLevel",   "position control runs on the HLP."), 
gen.const("POSCTRL_GPS",             str_t, "GPS",         "gps position control on the LLP.")],
"An enum to set the position control mode.")

enum_state_estimation_mode = gen.enum([
gen.const("STATE_EST_OFF",           str_t, "off",         "state estimation off"),
gen.const("STATE_EST_HIGHLEVEL_SSDK",str_t, "HighLevel_SSDK","state estimation runs on the HLP within the SSDK."), 
gen.const("STATE_EST_HIGHLEVEL_EKF", str_t, "HighLevel_EKF","state estimation runs on the HLP within an EKF."), 
gen.const("STATE_EST_EXTERN",        str_t, "Extern",      "state estimation is performed externally.")],
"An enum to set the state estimation mode.")


#       Name                        Type        Reconfiguration level    Description                                           Default Min     Max


gen.add("max_velocity_xy",          double_t,   MISC["value"],           "maximum velocity in x/y [m/s].",                     0.5,    0.,     10.0)
gen.add("max_velocity_z",           double_t,   MISC["value"],           "maximum velocity in z [m/s].",                       0.2,    0.,     2.0)
gen.add("max_velocity_yaw",         double_t,   MISC["value"],           "maximum velocity yaw [rad/s].",                      0.1,    0.,     1.57)
gen.add("min_pos_x",                double_t,   MISC["value"],           "lower bound for position x [m].",                   -1.0e3, -1.0e3, 1.0e3)
gen.add("min_pos_y",                double_t,   MISC["value"],           "lower bound for position y [m].",                   -1.0e3, -1.0e3, 1.0e3)
gen.add("min_pos_z",                double_t,   MISC["value"],           "lower bound for position z [m].",                   -1.0e3, -1.0e3, 1.0e3)
gen.add("max_pos_x",                double_t,   MISC["value"],           "upper bound for position x [m].",                   1.0e3,  -1.0e3, 1.0e3)
gen.add("max_pos_y",                double_t,   MISC["value"],           "upper bound for position y [m].",                   1.0e3,  -1.0e3, 1.0e3)
gen.add("max_pos_z",                double_t,   MISC["value"],           "upper bound for position z [m].",                   1.0e3,  -1.0e3, 1.0e3)




gen.add("ksi_trans_out_x",                double_t,   MISC["value"],           "   ",                   1.6,  0, 10)
gen.add("ksi_trans_out_y",                double_t,   MISC["value"],           "   ",                   1.6,  0, 10)
gen.add("ksi_trans_out_z",                double_t,   MISC["value"],           "   ",                   2.5,  0, 10)

gen.add("omega_trans_out_x",                double_t,   MISC["value"],           "  ",                   0.2,  0, 10)
gen.add("omega_trans_out_y",                double_t,   MISC["value"],           "  ",                   0.2,  0, 10)
gen.add("omega_trans_out_z",                double_t,   MISC["value"],           "  ",                   0.2,  0, 10)

gen.add("ksi_trans_in_x",                double_t,   MISC["value"],           "   ",                   1.6,  0, 10)
gen.add("ksi_trans_in_y",                double_t,   MISC["value"],           "   ",                   1.6,  0, 10)
gen.add("ksi_trans_in_z",                double_t,   MISC["value"],           "   ",                   2.5,  0, 10)

gen.add("omega_trans_in_x",                double_t,   MISC["value"],           "    ",                    0.8,  0, 10)
gen.add("omega_trans_in_y",                double_t,   MISC["value"],           "    ",                    0.8,  0, 10)
gen.add("omega_trans_in_z",                double_t,   MISC["value"],           "    ",                    0.8,  0, 10)

gen.add("ksi_trans_out_x_filter",                double_t,   MISC["value"],           "    ",                   1.414,   0,  10)
gen.add("ksi_trans_out_y_filter",                double_t,   MISC["value"],           "     ",                   1.414,  0, 10)
gen.add("ksi_trans_out_z_filter",                double_t,   MISC["value"],           "     ",                   1.414,  0, 10)

gen.add("omega_trans_out_x_filter",                double_t,   MISC["value"],           "     ",                   10,  0, 50)
gen.add("omega_trans_out_y_filter",                double_t,   MISC["value"],           "     ",                   10,  0, 50)
gen.add("omega_trans_out_z_filter",                double_t,   MISC["value"],           "     ",                   10,  0, 50)

gen.add("ksi_trans_in_x_filter",                double_t,   MISC["value"],           "     ",                   1.414,  0, 10)
gen.add("ksi_trans_in_y_filter",                double_t,   MISC["value"],           "     ",                   1.414,  0, 10)
gen.add("ksi_trans_in_z_filter",                double_t,   MISC["value"],           "      ",                  1.414,  0, 10)

gen.add("omega_trans_in_x_filter",                double_t,   MISC["value"],           "      ",                   10,  0, 50)
gen.add("omega_trans_in_y_filter",                double_t,   MISC["value"],           "      ",                   10,  0, 50)
gen.add("omega_trans_in_z_filter",                double_t,   MISC["value"],           "      ",                   10,  0, 50)

gen.add("ksi_yaw_out",                        double_t,   MISC["value"],           "   ",                   2.6,  0, 10)
gen.add("omega_yaw_out",                      double_t,   MISC["value"],           "   ",                   1.2,  0, 10)
gen.add("ksi_yaw_out_filter",                 double_t,   MISC["value"],           "   ",                   1.414,  0, 10)
gen.add("omega_yaw_out_filter",                double_t,   MISC["value"],           "   ",                   10,  0, 50)




gen.add("mass_control",                double_t,   MISC["value"],           "mass",                   1.5,  1, 5)





exit(gen.generate(PACKAGE, "Config", "motion_planning_para"))
